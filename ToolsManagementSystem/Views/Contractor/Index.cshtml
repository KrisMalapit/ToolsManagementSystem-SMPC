@*@model IEnumerable<ToolsManagementSystem.Models.Contractor>*@
@model PagedList.IPagedList<ToolsManagementSystem.Models.Contractor>
@using PagedList.Mvc;


@{
    ViewBag.Title = "Index";
}
@if (!User.IsInRole("User"))
{ 
<div class="col-md-12">
    <div class="form-group">
        <i class="glyphicon glyphicon-plus"></i>@Html.ActionLink(" Create New", "Create")
    </div>
</div>
}
<div class="col-md-4 ">
</div>
<div class="col-md-4">
</div>
<div class="col-md-4">
    <div class="form-group">
        @using (Html.BeginForm())
        {
            <div class="input-group">
                <input id="SearchString" type="text" class="form-control" placeholder="Search" value="@ViewBag.SearchStr" name="searchString">
                <div class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                        <i class="glyphicon glyphicon-search"></i>
                    </button>
                    <button id="btnRefresh" onclick="refreshItems()" class="btn btn-default btn-refresh" title="Filter" name="filter" type="button" data-toggle="dropdown" aria-expanded="false">
                        <i class="glyphicon glyphicon-refresh icon-refresh"></i>
                    </button>
                </div>
            </div>

        }

    </div>
</div>
<table class="table">
    <tr>
        <th>
            Name
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
@*          @Html.ActionLink("Edit", "Edit", new { id=item.id }) |
            @Html.ActionLink("Details", "Details", new { id=item.id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.id })*@

            @Html.ActionLink("Edit", "Edit", new { id=item.id }) |
            @Html.ActionLink("Details", "Details", new { id=item.id })
        </td>
    </tr>
}

</table>

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, searchString=ViewBag.SearchStr }))